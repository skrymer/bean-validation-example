/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package net.skrymer.bean_validation

import spock.lang.Specification

import javax.validation.Validation

class BeanValidationSpec extends Specification {
    def factory = Validation.buildDefaultValidatorFactory();
    def validator = factory.getValidator();
    def executableValidator = validator.forExecutables()

    def "should correctly validate object"() {
        given: 'first name is empty'
        def name = new Name()
        name.setLast(null)
        name.setLast("Nielsen")

        when: 'validating name'
        def violations = validator.validate(name)

        then: 'constraint violation is returned'
        violations.size() == 1
        violations[0].getMessage() == 'first name must not be empty'
    }

    def 'should correctly validate method arguments' () {
        given: 'first name is empty'
        def name = new Name()
        name.setFirst(null)
        name.setLast('Nielsen')

        when: 'validating arguments passed to setName on a Person object'
        def person = new Person()
        def violations = executableValidator
                .validateParameters(person, Person.getMethod('setName', Name), [name] as Object[])

        then: 'constraint violation is returned'
        violations.size() == 1
        println violations[0].getMessage() == 'first name must not be empty'
    }

    def 'should correctly validate collection constraints'() {
        given:'pet name is blank'
        def person = new Person()
        person.setPetNames([' '])

        when: 'validating a person'
        def violations = validator.validate(person)

        then: 'constraint violation is returned'
        violations.size() == 1
        violations[0].getMessage() == 'Pet name must not be blank'
    }
}
